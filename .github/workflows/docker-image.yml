name: Docker Build and Deploy

on:
  push:
    branches: [main]
    tags: ['v*.*.*']

env:
  REGISTRY: docker.io
  IMAGE_NAME: mkuliaev/my-nginx-app
  K8S_NAMESPACE: kuliaev-diplom
  DEPLOYMENT_NAME: nginx-app
  CONTAINER_NAME: nginx

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}

  deploy:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.5'  # Фиксированная версия

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config  # Если KUBE_CONFIG не в base64
          chmod 600 ~/.kube/config

      - name: Verify cluster access
        run: |
          kubectl version  # Убрать --short
          kubectl --insecure-skip-tls-verify get nodes
          kubectl --insecure-skip-tls-verify -n ${{ env.K8S_NAMESPACE }} get deploy  # Исправлен синтаксис

      - name: Update deployment image
        run: |
          kubectl -n ${{ env.K8S_NAMESPACE }} set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.CONTAINER_NAME }}=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} \
            --record

      - name: Verify deployment
        run: |
          kubectl -n ${{ env.K8S_NAMESPACE }} rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=180s
          kubectl -n ${{ env.K8S_NAMESPACE }} get pods
